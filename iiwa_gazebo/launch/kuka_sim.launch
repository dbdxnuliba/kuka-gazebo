<?xml version="1.0"?>
<launch>
    
    <!-- ===================================================================================== -->
    <!-- |    Lauch file to start Gazebo with ane Model using various controllers.	         | -->
    
    <!-- |    It allows to customize the name of the robot, for each robot                   | -->
    <!-- |	  its topics will be under a nameespace with the same name as the robot's.       | -->
    
    <!-- |	  One can choose to have a joint trajectory controller or                        | -->
    <!-- |    controllers for the single joints, using the "trajectory" argument.            | -->
    <!-- ===================================================================================== -->
    
    <arg name="hardware_interface" default="EffortJointInterface" />
    <arg name="robot_name" default="iiwa" />
    <arg name="model" default="iiwa14"/>
    <arg name="trajectory" default="false"/>
    <arg name="controller_params" default="iiwa_sim" />
    <arg name="environment" default="test" />
    <arg name="urdf_load" default="iiwa14" />
    
    <!-- Loads the Gazebo world. -->
    <include file="$(find iiwa_gazebo)/launch/iiwa_world.launch">
        <arg name="hardware_interface" value="$(arg hardware_interface)" />
        <arg name="robot_name" value="$(arg robot_name)" />
        <arg name="model" value="$(arg model)" />
        <arg name="environment" value="$(arg environment)" />
        <arg name="urdf_load" value="$(arg urdf_load)" />
    </include>
    
    <!-- Spawn controllers - it uses a JointTrajectoryController -->
    <group  ns="$(arg robot_name)" if="$(arg trajectory)">
        
        <include file="$(find iiwa_control)/launch/iiwa_control.launch">
            <arg name="hardware_interface" value="$(arg hardware_interface)" />
            <arg name="controllers" value="$(arg hardware_interface)_trajectory_controller $(arg hardware_interface)_table_joint_controller $(arg hardware_interface)_table_joint_tilt_controller" />
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="model" value="$(arg model)" />
            <arg name="controller_params" value="$(arg controller_params)" />
        </include>
        
    </group>
    

    <!-- start the controllers -->

    <!-- Spawn controllers - it uses an Effort Controller for each joint. To load individual controllers for each joint. This is the real KUKA is setup-->
   <group ns="$(arg robot_name)" unless="$(arg trajectory)">
        
        <include file="$(find iiwa_control)/launch/iiwa_control.launch">
            <arg name="hardware_interface" value="$(arg hardware_interface)" />
            <arg name="controllers" value="joint_state_controller
                 $(arg hardware_interface)_J1_controller
                 $(arg hardware_interface)_J2_controller
                 $(arg hardware_interface)_J3_controller
                 $(arg hardware_interface)_J4_controller
                 $(arg hardware_interface)_J5_controller
                 $(arg hardware_interface)_J6_controller
                 $(arg hardware_interface)_J7_controller
                 "/>
            <arg name="robot_name" value="$(arg robot_name)" />
            <arg name="model" value="$(arg model)" />
            <arg name="controller_params" value="$(arg controller_params)" />
        </include>
        
    </group>

    <!-- Loads the python script to move the table  -->
<!--     <node name="table_pulsate" pkg="scripts_sim" type="move_table.py" respawn="true"
          output="screen" args="" /> -->

    <!-- moves the joint states to a feasible position -->

</launch>
